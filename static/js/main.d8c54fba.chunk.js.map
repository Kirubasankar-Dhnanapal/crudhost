{"version":3,"sources":["serviceWorker.js","App.js","lazyload.js","Routers.js","index.js"],"names":["Boolean","window","location","hostname","match","Appp","props","setData","e","setState","name","currentTarget","cells","innerText","mobilenumber","id","createUuid","replace","c","r","Math","random","toString","insertCheck","state","fetch","method","body","JSON","stringify","headers","then","res","json","matchTarget","tabledata","alert","updateCheck","deleteCheck","target","value","response","success","data","console","log","this","Fragment","style","backgroundColor","height","display","className","type","onChange","onClick","map","cursor","key","hidden","React","Component","withRouter","Lazyload","loadContacts","resultList","url","page","results","result","scrolling","totalPages","handleScroll","lastLi","document","querySelector","lastLiOffset","offsetTop","clientHeight","pageYOffset","innerHeight","loadmore","scrollListner","addEventListener","flat","ContactList","email","gender","phone","coordinates","latitude","longitude","Routers","exact","path","component","App","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d8c54fba.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nclass Appp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            matchTarget: '',\r\n            mobilenumber : '',\r\n            name:''\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`http://localhost:3002/getreviews`,{\r\n         method: 'GET', \r\n         headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n        }).then((response) =>\r\n            response.json()\r\n        ).then((res) => res.success === true ? this.setState({\r\n            matchTarget: res.data\r\n        }) : null)\r\n    }\r\n\r\n    setData = (e) => {\r\n        this.setState({\r\n            name: e.currentTarget.cells['name'].innerText,\r\n            mobilenumber: e.currentTarget.cells['mobilenumber'].innerText,\r\n            id: e.currentTarget.cells['id'].innerText\r\n        })\r\n\r\n    }\r\n\r\n\r\n    createUuid = () => {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n\r\n    insertCheck = (e) => {\r\n        if (this.state.name && this.state.mobilenumber) {\r\n            var id = this.createUuid()\r\n            fetch(`http://localhost:3002/insertdata`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({ id: id, name: this.state.name, mobilenumber: this.state.mobilenumber }),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }).then((res) => res.json()).then(res =>\r\n                this.setState({\r\n                    matchTarget: res.tabledata,\r\n                    name: '',\r\n                    mobilenumber: ''\r\n                })\r\n            );\r\n        }\r\n        else {\r\n            alert(\"Data insufficient\");\r\n        }\r\n    }\r\n\r\n    updateCheck = (e) => {\r\n        if (this.state.name && this.state.mobilenumber) {\r\n            fetch(`http://localhost:3002/updatedata`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: this.state.name, mobilenumber: this.state.mobilenumber, id: this.state.id }),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }).then((res) => res.json()).then(res =>\r\n                this.setState({\r\n                    matchTarget: res.tabledata,\r\n                    name: '',\r\n                    mobilenumber: ''\r\n                })\r\n            );\r\n        } else {\r\n            alert(\"Data insufficient\");\r\n        }\r\n    }\r\n\r\n    deleteCheck = (e) => {\r\n        if (this.state.id) {\r\n            fetch(`http://localhost:3002/deletedata`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({ id: this.state.id }),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }).then((res) => res.json()).then(res =>\r\n                this.setState({\r\n                    matchTarget: res.tabledata,\r\n                    name: '',\r\n                    mobilenumber: ''\r\n                })\r\n            );\r\n        } else {\r\n            alert(\"Data insufficient\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    name = (e) => {\r\n        this.setState({\r\n            name: e.target.value\r\n        })\r\n    }\r\n\r\n    mobilenumber = (e) => {\r\n        this.setState({\r\n            mobilenumber: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        console.log(this.state.matchTarget)\r\n        return (\r\n            <React.Fragment>\r\n                <div>\r\n                    <div style={{ backgroundColor: 'linen', height: '100vh' }}>\r\n                    <h1>React and Node CRUD Application</h1>\r\n                        <div style={{ display: 'flex' }}>\r\n                            <div className='nameTag'>Name : </div>\r\n                            <div className='namedivm'><input className='inputtype' type='text' id='name' onChange={this.name} value={this.state.name}></input></div>\r\n                            <div className='sumlabel'>Mobile Number : </div>\r\n                            <div className='namedivm'><input className='sumText' type='number' id='summary' onChange={this.mobilenumber} value={this.state.mobilenumber}></input></div>\r\n                        </div>\r\n                        <ul className='buttonTag'>\r\n                            <li><button onClick={this.insertCheck}>Insert</button></li>\r\n                            <li><button onClick={this.updateCheck}>Update</button></li>\r\n                            <li><button onClick={this.deleteCheck}>Delete</button></li>\r\n                        </ul>\r\n                        <table id='student-table'>\r\n                            <th>Name</th>\r\n                            <th>Mobile Number</th>\r\n                            <tbody>\r\n                              \r\n                                {this.state.matchTarget ? this.state.matchTarget.map((res) =>\r\n                                    <tr onClick={this.setData} style={{ cursor: 'pointer' }} key={res.id}><td id='name'>{res.name}</td>\r\n                                        <td id='mobilenumber'>{res.mobilenumber}</td><td id='id' hidden={true}>{res.id}</td></tr>\r\n                                    )\r\n                                    : null\r\n                                }\r\n            \r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\nexport default withRouter(Appp);\r\n","import React from \"react\";\r\n\r\nclass Lazyload extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            resultList: '',\r\n            page: 1,\r\n            results: 20\r\n        };\r\n\r\n    }\r\n\r\n    loadContacts = () => {\r\n        const { resultList, page, results } = this.state;\r\n        const url = `https://randomuser.me/api/?page=${this.state.page}&results=${this.state.results}`\r\n        fetch(url).then((res) => res.json()).then((result) => this.setState({\r\n            resultList: [...resultList,result.results],\r\n            scrolling:false,\r\n            totalPages : 20\r\n        }))\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.loadContacts();\r\n        this.scrollListner = window.addEventListener('scroll',()=>{\r\n            this.handleScroll()\r\n        })\r\n    }\r\n\r\n    handleScroll = () => {\r\n        const {scrolling,totalPages,page} = this.state\r\n        if(scrolling) return\r\n        if(totalPages<=page) return\r\n        const lastLi = document.querySelector('ul>li:last-child')\r\n        const lastLiOffset = lastLi.offsetTop + lastLi.clientHeight\r\n        const pageOffset = window.pageYOffset + window.innerHeight\r\n        var bottomOffset = 20\r\n        if(pageOffset>lastLiOffset-bottomOffset) this.loadmore()\r\n    }\r\n\r\n    loadmore = () => {\r\n        this.setState(({\r\n            page: this.state.page+1,\r\n            scrolling :true,\r\n        }), this.loadContacts);\r\n    }\r\n\r\n    render() {\r\n        // if (this.state.loading) {\r\n        //     return (\r\n        //         <h5>Loading...</h5>\r\n        //     )\r\n        // }\r\n        return (\r\n            <div>\r\n                <h1>Lazyload</h1>\r\n                <ul>\r\n                {this.state.resultList ?\r\n                    this.state.resultList.flat().map((results) => <li>\r\n                        <ContactList {...results} />\r\n                    </li> ) : null\r\n                }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nconst ContactList = (props) => {\r\n    return (\r\n        <div>\r\n            <div><label>Name :</label> {props.email}</div>\r\n            <div><label>Gender :</label> {props.gender}</div>\r\n            <div><label>Phone :</label> {props.phone}</div>\r\n            <div><label>Latitude :</label> {props.location.coordinates.latitude}</div>\r\n            <div><label>Longitude :</label> {props.location.coordinates.longitude}</div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Lazyload;","import { Route, Switch,HashRouter } from \"react-router-dom\";\r\nimport React, { Component } from \"react\";\r\nimport App from './App';\r\nimport Lazyload from './lazyload';\r\n\r\n\r\nclass Routers extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route exact path='/' component={App}/>\r\n                    <Route path='/lazy' component={Lazyload}/>\r\n                </Switch>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\nexport default (Routers);\r\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Routers from './Routers';\r\n\r\nReactDOM.render(<Routers/>,document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}